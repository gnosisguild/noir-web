pub mod polynomial;
pub mod pk_encryption;
pub mod pk_enc_constants_1024_2x52_2048;

use polynomial::Polynomial;
use pk_encryption::BfvPkEncryptionCircuit;
use pk_enc_constants_1024_2x52_2048::{N, L};

fn main(
    pk0is: [Polynomial<N>; L],
    pk1is: [Polynomial<N>; L],
    ct0is: [Polynomial<N>; L],
    ct1is: [Polynomial<N>; L],
    u: Polynomial<N>,
    e0: Polynomial<N>,
    e1: Polynomial<N>,
    k1: Polynomial<N>,
    r1is: [Polynomial<(2 * N) - 1>; L],
    r2is: [Polynomial<N - 1>; L],
    p1is: [Polynomial<(2 * N) - 1>; L],
    p2is: [Polynomial<N - 1>; L]
) {
    let circuit = BfvPkEncryptionCircuit::new(
        pk0is,
        pk1is,
        ct0is,
        ct1is,
        u,
        e0,
        e1,
        k1,
        r1is,
        r2is,
        p1is,
        p2is
    );
    circuit.correct_encryption();
} 